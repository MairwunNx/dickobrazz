package application

import (
	"time"

	"dickobrazz/application/datetime"
)

type EmojiRange struct {
	Min, Max int
	Emoji    string
}

var NewYearEmojiRanges = []EmojiRange{
	{0, 1, "üéÅ"},
	{2, 3, "‚ùÑÔ∏è"},
	{4, 8, "üéÑ"},
	{9, 13, "‚õÑ"},
	{14, 16, "ü•í"},
	{17, 20, "ü•ï"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üéÖ"},
	{50, 54, "‚≠ê"},
	{55, 59, "üéÜ"},
	{60, 60, "üöÄ"},
}

var ValentineEmojiRanges = []EmojiRange{
	{0, 1, "üíî"},
	{2, 3, "üíå"},
	{4, 8, "üíï"},
	{9, 13, "üíñ"},
	{14, 16, "üåπ"},
	{17, 20, "üíê"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üíù"},
	{50, 54, "üíó"},
	{55, 59, "üíò"},
	{60, 60, "üöÄ"},
}

var DefenderDayEmojiRanges = []EmojiRange{
	{0, 1, "üéñÔ∏è"},
	{2, 3, "ü™ñ"},
	{4, 8, "üõ°Ô∏è"},
	{9, 13, "‚öîÔ∏è"},
	{14, 16, "ü•í"},
	{17, 20, "ü•ï"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üéñÔ∏è"},
	{50, 54, "üí™"},
	{55, 59, "ü¶Ö"},
	{60, 60, "üöÄ"},
}

var WomenDayEmojiRanges = []EmojiRange{
	{0, 1, "üå∏"},
	{2, 3, "üåº"},
	{4, 8, "üå∑"},
	{9, 13, "üíê"},
	{14, 16, "ü•¶"},
	{17, 20, "üåª"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üë©"},
	{50, 54, "üå∫"},
	{55, 59, "üåπ"},
	{60, 60, "üöÄ"},
}

var AprilFoolsEmojiRanges = []EmojiRange{
	{0, 1, "ü§™"},
	{2, 3, "ü§°"},
	{4, 8, "üòú"},
	{9, 13, "üé≠"},
	{14, 16, "ü•¶"},
	{17, 20, "üåª"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üÉè"},
	{50, 54, "üé™"},
	{55, 59, "üéâ"},
	{60, 60, "üöÄ"},
}

var CosmonauticsDayEmojiRanges = []EmojiRange{
	{0, 1, "‚≠ê"},
	{2, 3, "üåü"},
	{4, 8, "‚ú®"},
	{9, 13, "üå†"},
	{14, 16, "ü•¶"},
	{17, 20, "üåª"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üë®‚ÄçüöÄ"},
	{50, 54, "üõ∏"},
	{55, 59, "ü™ê"},
	{60, 60, "üöÄ"},
}

var EasterEmojiRanges = []EmojiRange{
	{0, 1, "üê£"},
	{2, 3, "ü•ö"},
	{4, 8, "üê∞"},
	{9, 13, "üå∑"},
	{14, 16, "ü•¶"},
	{17, 20, "üåª"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üêá"},
	{50, 54, "ü™∫"},
	{55, 59, "üå∏"},
	{60, 60, "üöÄ"},
}

var RussiaDayEmojiRanges = []EmojiRange{
	{0, 1, "üá∑üá∫"},
	{2, 3, "üéâ"},
	{4, 8, "üéä"},
	{9, 13, "üéà"},
	{14, 16, "üçå"},
	{17, 20, "üåΩ"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üá∑üá∫"},
	{50, 54, "ü¶Ö"},
	{55, 59, "‚≠ê"},
	{60, 60, "üöÄ"},
}

var HalloweenEmojiRanges = []EmojiRange{
	{0, 1, "ü¶á"},
	{2, 3, "üëª"},
	{4, 8, "üï∑Ô∏è"},
	{9, 13, "üï∏Ô∏è"},
	{14, 16, "ü•¨"},
	{17, 20, "üéÉ"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üßõ"},
	{50, 54, "üíÄ"},
	{55, 59, "üßü"},
	{60, 60, "üöÄ"},
}

var SummerEmojiRanges = []EmojiRange{
	{0, 1, "üîç"},
	{2, 3, "ü§èüèª"},
	{4, 8, "üçíüå°"},
	{9, 13, "üìâ"},
	{14, 16, "üçå"},
	{17, 20, "üåΩ"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üë®üèø‚Äçü¶±"},
	{50, 54, "üå¥"},
	{55, 59, "üóº"},
	{60, 60, "üöÄ"},
}

var WinterEmojiRanges = []EmojiRange{
	{0, 1, "ü•∂"},
	{2, 3, "üßä"},
	{4, 8, "‚ùÑÔ∏è"},
	{9, 13, "‚òÉÔ∏è"},
	{14, 16, "ü•í"},
	{17, 20, "ü•ï"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üéÖ"},
	{50, 54, "üå≤"},
	{55, 59, "üèîÔ∏è"},
	{60, 60, "üöÄ"},
}

var AutumnEmojiRanges = []EmojiRange{
	{0, 1, "üçÇ"},
	{2, 3, "üçÅ"},
	{4, 8, "üå∞"},
	{9, 13, "üçÑ"},
	{14, 16, "ü•¨"},
	{17, 20, "üéÉ"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üë®üèª‚Äçüåæ"},
	{50, 54, "üçá"},
	{55, 59, "üåßÔ∏è"},
	{60, 60, "üöÄ"},
}

var SpringEmojiRanges = []EmojiRange{
	{0, 1, "üå±"},
	{2, 3, "üåº"},
	{4, 8, "üå∑"},
	{9, 13, "üåà"},
	{14, 16, "ü•¶"},
	{17, 20, "üåª"},
	{21, 28, "üî•"},
	{29, 34, "üçÜ"},
	{35, 42, "üå∂Ô∏è"},
	{43, 49, "üë©‚Äçüåæ"},
	{50, 54, "üêù"},
	{55, 59, "üå∫"},
	{60, 60, "üöÄ"},
}

type Season int

const (
	Winter Season = iota
	Spring
	Summer
	Autumn
)

func EmojiFromSize(size int) string {
	holidaySet := GetHolidayEmojiSet()
	for _, r := range holidaySet {
		if size >= r.Min && size <= r.Max {
			return r.Emoji
		}
	}

	season := GetCurrentSeason()
	
	var emojiSet []EmojiRange
	
	switch season {
	case Winter:
		emojiSet = WinterEmojiRanges
	case Spring:
		emojiSet = SpringEmojiRanges
	case Autumn:
		emojiSet = AutumnEmojiRanges
	case Summer:
		emojiSet = SummerEmojiRanges
	}

	for _, r := range emojiSet {
		if size >= r.Min && size <= r.Max {
			return r.Emoji
		}
	}
	return "üíé"
}

func GetHolidayEmojiSet() []EmojiRange {
	now := datetime.NowTime()
	month := now.Month()
	day := now.Day()
	year := now.Year()

	// –ù–æ–≤—ã–π –≥–æ–¥: 31 –¥–µ–∫–∞–±—Ä—è - 10 —è–Ω–≤–∞—Ä—è
	if (month == time.December && day == 31) || (month == time.January && day <= 10) {
		return NewYearEmojiRanges
	}

	// –î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞: 14 —Ñ–µ–≤—Ä–∞–ª—è
	if month == time.February && day == 14 {
		return ValentineEmojiRanges
	}

	// –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞: 23 —Ñ–µ–≤—Ä–∞–ª—è
	if month == time.February && day == 23 {
		return DefenderDayEmojiRanges
	}

	// 8 –ú–∞—Ä—Ç–∞
	if month == time.March && day == 8 {
		return WomenDayEmojiRanges
	}

	// –î–µ–Ω—å —Å–º–µ—Ö–∞: 1 –∞–ø—Ä–µ–ª—è
	if month == time.April && day == 1 {
		return AprilFoolsEmojiRanges
	}

	// –î–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏: 12 –∞–ø—Ä–µ–ª—è
	if month == time.April && day == 12 {
		return CosmonauticsDayEmojiRanges
	}

	// –ü–∞—Å—Ö–∞: —Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é
	// –ü—Ä–∞–∑–¥–Ω—É–µ–º –°–≤–µ—Ç–ª—É—é —Å–µ–¥–º–∏—Ü—É (7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ü–∞—Å—Ö–∏)
	easterDate := OrthodoxEaster(year, datetime.NowLocation())
	easterEnd := easterDate.AddDate(0, 0, 7)
	if (now.After(easterDate) || now.Equal(easterDate)) && now.Before(easterEnd) {
		return EasterEmojiRanges
	}

	// –î–µ–Ω—å –†–æ—Å—Å–∏–∏: 12 –∏—é–Ω—è
	if month == time.June && day == 12 {
		return RussiaDayEmojiRanges
	}

	// –•—ç–ª–ª–æ—É–∏–Ω: 31 –æ–∫—Ç—è–±—Ä—è
	if month == time.October && day == 31 {
		return HalloweenEmojiRanges
	}

	return nil
}

func GetCurrentSeason() Season {
	now := time.Now()
	month := now.Month()
	
	switch month {
	case time.December, time.January, time.February:
		return Winter
	case time.March, time.April, time.May:
		return Spring
	case time.June, time.July, time.August:
		return Summer
	case time.September, time.October, time.November:
		return Autumn
	default: // –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä "—è–∫–æ–±—ã" —É–º–Ω–µ–µ –º–µ–Ω—è, –Ω–µ –¥–æ–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è, –≤–µ–¥—å —Å–µ–∑–æ–Ω–æ–≤ —Ç–æ 4 *trollface.png*
		return Summer
	}
}

// OrthodoxEaster –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–π –ü–∞—Å—Ö–∏ –≤ –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
// –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ.
// –ê–ª–≥–æ—Ä–∏—Ç–º: –ü–∞—Å—Ö–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤ —é–ª–∏–∞–Ω—Å–∫–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (Meeus Julian algorithm),
// –∑–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫—É—é –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:
//   Œî = y/100 - y/400 - 2  (–≤ —Å—É—Ç–∫–∞—Ö; –≤–µ—Ä–Ω–æ –¥–ª—è –¥–∞—Ç –ø–æ—Å–ª–µ 1600-03-01)
func OrthodoxEaster(year int, loc *time.Location) time.Time {
  // –®–∞–≥ 1: –ü–∞—Å—Ö–∞ –≤ —é–ª–∏–∞–Ω—Å–∫–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (—á–∏—Å–ª–æ –º–∞—Ä—Ç–∞/–∞–ø—Ä–µ–ª—è –ø–æ –Æ–ö)
  a := year % 4
  b := year % 7
  c := year % 19
  d := (19*c + 15) % 30
  e := (2*a + 4*b - d + 34) % 7

  // –Æ–ª–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞ –ü–∞—Å—Ö–∏: 22 –º–∞—Ä—Ç–∞ + d + e (–µ—Å–ª–∏ >31 ‚Äî —ç—Ç–æ –∞–ø—Ä–µ–ª—å)
  julianDay := 22 + d + e
  var month time.Month
  var day int
  if julianDay > 31 {
    month = time.April
    day = julianDay - 31
  } else {
    month = time.March
    day = julianDay
  }

  // –®–∞–≥ 2: —Ä–∞–∑–Ω–∏—Ü–∞ –Æ–ö‚Üí–ì–ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ (—Å—É—Ç–æ–∫)
  // –î–ª—è 1900‚Äì2099 —ç—Ç–æ 13, –¥–ª—è 2100‚Äì2199 ‚Äî 14 –∏ —Ç.–¥.
  delta := year/100 - year/400 - 2

  // –®–∞–≥ 3: —Å–æ–∑–¥–∞—ë–º "—é–ª–∏–∞–Ω—Å–∫—É—é" –¥–∞—Ç—É –≤ Go (–∫–∞–∫ –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫—É—é)
  // –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π ‚Äî –ø–æ–ª—É—á–∞–µ–º –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫—É—é –ü–∞—Å—Ö—É.
  julianAsGregorian := time.Date(year, month, day, 0, 0, 0, 0, loc)
  return julianAsGregorian.AddDate(0, 0, delta)
}
