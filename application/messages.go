package application

import (
	"fmt"
	"strings"
	"time"
)

const (
	CommonDots = "..."

	MsgCockScoreboardNotFound = "\nü•Ä *–¢–µ–±–µ —Å–æ–±–æ–ª–µ–∑–Ω—É–µ–º... –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –∫–æ–∫!*"

	MsgCockSize                    = "–ú–æ–π –∫–æ–∫: *%s—Å–º* %s"
	MsgCockRulerScoreboardDefault  = "%s @%s *%s—Å–º* %s"
	MsgCockRulerScoreboardSelected = "%s *@%s %s—Å–º* %s"
	MsgCockRulerScoreboardOut      = "\nü•Ä *–ò %s —Ç–≤–æ–π –∫–æ–∫ %s—Å–º* %s"

	MsgCockRaceScoreboardDefault  = "%s @%s *%s—Å–º*"
	MsgCockRaceScoreboardSelected = "%s *@%s %s—Å–º*"
	MsgCockRaceScoreboardOut      = "\nü•Ä *–ò %s —Ç–≤–æ–π –∫–æ–∫ %s—Å–º*"

	MsgCockLadderScoreboardDefault  = "%s @%s *%s—Å–º*"
	MsgCockLadderScoreboardSelected = "%s *@%s %s—Å–º*"
	MsgCockLadderScoreboardOut      = "\nü•Ä *–ò %s —Ç–≤–æ–π –∫–æ–∫ %s—Å–º*"

	MsgCockRulerScoreboardTemplate = `*–õ–∏–Ω–µ–π–∫–∞ –∫–æ–∫–æ–≤:*

üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏:

%s

ü•Ä –û—Å—Ç–∞–ª—å–Ω—ã–º —Å–æ–±–æ–ª–µ–∑–Ω—É–µ–º:

%s

_–õ–∏–Ω–µ–π–∫–∞ –∫–æ–∫–æ–≤ ‚Äì —á–∏—Å—Ç—ã–π —Ä–∞–Ω–¥–æ–º, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –±–æ–≥, –∑–∞–≤—Ç—Ä–∞ —Ç—ã –ª–æ—Ö. –í—Å–µ –∫–æ–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –ø–æ –ú–°–ö!_`

	MsgCockRulerScoreboardWinnersTemplate = `*–õ–∏–Ω–µ–π–∫–∞ –∫–æ–∫–æ–≤:*

üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏:

%s

_–õ–∏–Ω–µ–π–∫–∞ –∫–æ–∫–æ–≤ ‚Äì —á–∏—Å—Ç—ã–π —Ä–∞–Ω–¥–æ–º, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –±–æ–≥, –∑–∞–≤—Ç—Ä–∞ —Ç—ã –ª–æ—Ö. –í—Å–µ –∫–æ–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –ø–æ –ú–°–ö!_`

	MsgCockRaceScoreboardTemplate = `*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ–Ω–∫–∏ –∫–æ–∫–æ–≤:*

üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏:

%s

ü•Ä –û—Å—Ç–∞–ª—å–Ω—ã–º —Å–æ–±–æ–ª–µ–∑–Ω—É–µ–º:

%s

_–ì–æ–Ω–∫–∞ –∫–æ–∫–æ–≤ ‚Äì —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–æ–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –∑–∞ –≤–µ—Å—å —Å–µ–∑–æ–Ω\. –ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–∫–æ–≤ ‚Äì —Å—É—Ç–∫–∏_
  
üöÄ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω –≥–æ–Ω–∫–∏ –∫–æ–∫–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª *%s*`

	MsgCockRaceScoreboardWinnersTemplate = `*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ–Ω–∫–∏ –∫–æ–∫–æ–≤:*

üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏:

%s

_–ì–æ–Ω–∫–∞ –∫–æ–∫–æ–≤ ‚Äì —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–æ–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –∑–∞ –≤–µ—Å—å —Å–µ–∑–æ–Ω\. –ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–∫–æ–≤ ‚Äì —Å—É—Ç–∫–∏_
  
üöÄ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω –≥–æ–Ω–∫–∏ –∫–æ–∫–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª *%s*`

	MsgCockLadderScoreboardTemplate = `*–õ–∞–¥–¥–µ—Ä –∫–æ–∫–æ–≤:*

üèÜ –õ–∏–¥–µ—Ä—ã –∫–æ–∫‚Äì–ª–∞–¥–¥–µ—Ä–∞:

%s

ü•Ä –ú–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –≤–µ—Ä–Ω–æ –ø–æ–¥–Ω–∏–º–∞—é—â–∏–µ—Å—è:

%s

_–õ–∞–¥–¥–µ—Ä –∫–æ–∫–æ–≤ ‚Äì –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∫–æ–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è\. –ü–æ–∫–æ—Ä—è–π –≤–µ—Ä—à–∏–Ω—ã\!_`

	MsgCockLadderScoreboardWinnersTemplate = `*–õ–∞–¥–¥–µ—Ä –∫–æ–∫–æ–≤:*

üèÜ –õ–∏–¥–µ—Ä—ã –∫–æ–∫‚Äì–ª–∞–¥–¥–µ—Ä–∞:

%s

_–õ–∞–¥–¥–µ—Ä –∫–æ–∫–æ–≤ ‚Äì –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∫–æ–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è\. –ü–æ–∫–æ—Ä—è–π –≤–µ—Ä—à–∏–Ω—ã\!_`

	MsgCockDynamicsTemplate = `
üìä *–û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–∫–æ–≤*

–û–±—â–∏–π –ø–æ—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∫–æ–∫: *%[1]s —Å–º* ü§≠
–í—Å–µ–≥–æ –∫–æ–∫–µ—Ä–æ–≤: *%[2]s* ü´°
–í—Å–µ–≥–æ –¥—ë—Ä–Ω—É—Ç–æ –∫–æ–∫–æ–≤: *%[26]s* ‚úäüèª

–î–µ–Ω—å —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∫–æ–∫–∞: *%[21]s*, –Ω–∞—Ä–∞—Å—Ç–∏–ª–∏ –∞–∂ *%[22]s—Å–º* üçæ

–°—Ä–µ–¥–Ω–∏–π –∫–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ _(5 –¥–Ω.)_: *%[3]s —Å–º* %[4]s
–ú–µ–¥–∏–∞–Ω–∞ –∫–æ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ _(5 –¥–Ω.)_: *%[5]s —Å–º* %[6]s

–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–∫–æ–≤ _(5 –¥–Ω.)_: üí™ *%[19]s%%* ü§è *%[20]s%%*

üìä *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–∫–∞*

–ò–†–ö (–ò–Ω–¥–µ–∫—Å –†–∞–∑–º–µ—Ä–∞ –ö–æ–∫–∞): __*%[10]s*__
–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–µ–∑–µ–Ω–∏—è _(5 –¥–Ω.)_: *%[28]s* %[29]s
–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–∫–∞ _(5 –¥–Ω.)_: *%[30]s* %[31]s

–û–±—â–∏–π –ø–æ—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∫–æ–∫: *%[7]s —Å–º* ü§Ø
–í —Å—Ä–µ–¥–Ω–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–∫–∞ _(5 –¥–Ω.)_: *%[8]s —Å–º* %[9]s
–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–∫ –±—ã–ª: *%[11]s —Å–º* %[12]s (*%[13]s*)
–í—Å–µ–≥–æ –¥—ë—Ä–Ω—É—Ç–æ –∫–æ–∫–æ–≤: *%[27]s* ‚úäüèª

–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: *%[23]s%%* üëë

üèÜ *–°–µ–∑–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

–ü–æ–±–µ–¥ –≤ —Å–µ–∑–æ–Ω–∞—Ö: *%[24]s* üéñÔ∏è
–ö–æ–∫-—Ä–µ—Å–ø–µ–∫—Ç: *%[25]s* üöÄ

üìà *–ö–æ–∫-–∞–∫—Ç–∏–≤—ã*

%[14]s –í—á–µ—Ä–∞—à–Ω—è—è –¥–∏–Ω–∞–º–∏–∫–∞: *%[15]s%%* (*%[16]s —Å–º*)
%[17]s –°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∏—Ä–æ—Å—Ç _(5 –¥–Ω.)_: *%[18]s —Å–º/–¥–µ–Ω—å*`

	MsgCockSeasonTemplate = `*–°–µ–∑–æ–Ω –∫–æ–∫–æ–≤* \(üü° –¢–µ–∫—É—â–∏–π\)
‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: *%[2]s \- %[3]s*

üîÆ –ü—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç—ã —Å–µ–∑–æ–Ω–∞:

%[1]s`

	MsgCockSeasonWithWinnersTemplate = `*–°–µ–∑–æ–Ω –∫–æ–∫–æ–≤* \(üü¢ –ó–∞–≤–µ—Ä—à—ë–Ω\)
‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: *%[2]s \- %[3]s*

üéñ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Å–µ–∑–æ–Ω–∞:

%[1]s`

	MsgCockSeasonTemplateFooter = `*–ö–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω* —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è –∏–≥—Ä–æ–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–≤–æ–∏ –∫–æ–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏\!

‚ÑπÔ∏è *–¢—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞* —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—É–º–º–∞—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∫–æ–∫–∞ –ø–æ–ª—É—á–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ *–∫–æ–∫\-—Ä–µ—Å–ø–µ–∫—Ç—ã‚Ñ¢*\!`

	MsgCockSeasonWinnerTemplate = "%[1]s *@%[2]s* —Å –∫–æ–∫–æ–º *%[3]s—Å–º*"
	
	MsgCockSeasonNoSeasonsTemplate = `*–°–µ–∑–æ–Ω—ã –∫–æ–∫–æ–≤*\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤\. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏\!`
)

func NewMsgCockDynamicsTemplate(
	/* –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–∫–æ–≤ */

	totalCock int,
	totalUsers int,
	totalAvgCock int,
	totalMedianCock int,

	/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–∫–∞ */

	userTotalCock int,
	userAvgCock int,
	userIrk float64,
	userMaxCock int,
	userMaxCockDate time.Time,

	/* –ö–æ–∫-–∞–∫—Ç–∏–≤—ã */

	userYesterdayChangePercent float64,
	userYesterdayChangeCock int,
	userDailyGrowth float64,

	/* –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–∫–æ–≤ */

	totalBigCockRatio float64,
	totalSmallCockRatio float64,

	/* –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–∫ */

	totalMaxCockDate time.Time,
	totalMaxCock int,

	/* % –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */

	userDominancePercent float64,

	/* –°–µ–∑–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */

	userSeasonWins int,
	userCockRespect int,

	/* –í—Å–µ–≥–æ –¥—ë—Ä–Ω—É—Ç–æ –∫–æ–∫–æ–≤ */

	totalCocksCount int,
	userCocksCount int,

	/* –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–µ–∑–µ–Ω–∏—è –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å */

	userLuckCoefficient float64,
	userVolatility float64,
) string {
	var userYesterdayChangePercentEmoji string
	var userYesterdayChangePercentSymbol string
	if userYesterdayChangePercent >= 0 {
		userYesterdayChangePercentEmoji = "üü©"
		userYesterdayChangePercentSymbol = "+"
	} else {
		userYesterdayChangePercentEmoji = "üü•"
		userYesterdayChangePercentSymbol = ""
	}

	var userDailyGrowthEmoji string
	var userDailyGrowthSymbol string
	if userDailyGrowth >= 0 {
		userDailyGrowthEmoji = "üü©"
		userDailyGrowthSymbol = "+"
	} else {
		userDailyGrowthEmoji = "üü•"
		userDailyGrowthSymbol = ""
	}

	return fmt.Sprintf(
		MsgCockDynamicsTemplate,

		/* –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–∫–æ–≤ */

		EscapeMarkdownV2(FormatDickSize(totalCock)),
		EscapeMarkdownV2(FormatDickSize(totalUsers)),
		EscapeMarkdownV2(FormatDickSize(totalAvgCock)), EmojiFromSize(totalAvgCock),
		EscapeMarkdownV2(FormatDickSize(totalMedianCock)), EmojiFromSize(totalMedianCock),

		/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–∫–∞ */

		EscapeMarkdownV2(FormatDickSize(userTotalCock)),
		EscapeMarkdownV2(FormatDickSize(userAvgCock)), EmojiFromSize(userAvgCock),
		EscapeMarkdownV2(FormatDickIkr(userIrk)),
		EscapeMarkdownV2(FormatDickSize(userMaxCock)), EmojiFromSize(userMaxCock), userMaxCockDate.Local().Format("02.01.06"),

		/* –ö–æ–∫-–∞–∫—Ç–∏–≤—ã */
		userYesterdayChangePercentEmoji, fmt.Sprintf("%s%s", userYesterdayChangePercentSymbol, FormatDickPercent(userYesterdayChangePercent)), fmt.Sprintf("%s%s", userYesterdayChangePercentSymbol, FormatDickSize(userYesterdayChangeCock)),
		userDailyGrowthEmoji, fmt.Sprintf("%s%s", userDailyGrowthSymbol, FormatDickPercent(userDailyGrowth)),

		/* –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–∫–æ–≤ */

		FormatDickPercent(totalBigCockRatio), FormatDickPercent(totalSmallCockRatio),

		/* –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–∫ */
		totalMaxCockDate.Local().Format("02.01.06"), FormatDickSize(totalMaxCock),

		/* % –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */
		FormatDickPercent(userDominancePercent),

		/* –°–µ–∑–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */
		FormatDickSize(userSeasonWins),
		FormatDickSize(userCockRespect),

		/* –í—Å–µ–≥–æ –¥—ë—Ä–Ω—É—Ç–æ –∫–æ–∫–æ–≤ */
		EscapeMarkdownV2(FormatDickSize(totalCocksCount)),
		EscapeMarkdownV2(FormatDickSize(userCocksCount)),

		/* –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–µ–∑–µ–Ω–∏—è –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å */
		EscapeMarkdownV2(FormatLuckCoefficient(userLuckCoefficient)), LuckEmoji(userLuckCoefficient),
		EscapeMarkdownV2(FormatVolatility(userVolatility)), VolatilityEmoji(userVolatility),
	)
}

func GetMedalByPosition(position int) string {
	switch position {
	case 0:
		return "ü•á"
	case 1:
		return "ü•à"
	case 2:
		return "ü•â"
	default:
		return ""
	}
}

func NewMsgCockSeasonTemplate(pretenders string, startDate, endDate string) string {
	return fmt.Sprintf(
		MsgCockSeasonTemplate,
		pretenders,
		startDate,
		endDate,
	)
}

func NewMsgCockSeasonWithWinnersTemplate(winners string, startDate, endDate string) string {
	return fmt.Sprintf(
		MsgCockSeasonWithWinnersTemplate,
		winners,
		startDate,
		endDate,
	)
}

func NewMsgCockSeasonWinnerTemplate(medal, nickname, totalSize string) string {
	return fmt.Sprintf(
		MsgCockSeasonWinnerTemplate,
		medal,
		EscapeMarkdownV2(nickname),
		EscapeMarkdownV2(totalSize),
	)
}

func NewMsgCockSeasonTemplateFooter() string {
	return MsgCockSeasonTemplateFooter
}

func NewMsgCockSeasonNoSeasonsTemplate() string {
	return MsgCockSeasonNoSeasonsTemplate
}

func NewMsgCockSeasonsFullText(seasons []CockSeason, totalSeasonsCount int, getSeasonWinners func(CockSeason) []SeasonWinner) string {
	if len(seasons) == 0 {
		return NewMsgCockSeasonNoSeasonsTemplate()
	}
	
	var seasonBlocks []string
	
	// –ü—Ä–æ—Ö–æ–¥–∏–º —Å–µ–∑–æ–Ω—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É)
	for i := len(seasons) - 1; i >= 0; i-- {
		season := seasons[i]
		startDate := EscapeMarkdownV2(season.StartDate.Format("02.01.2006"))
		endDate := EscapeMarkdownV2(season.EndDate.Format("02.01.2006"))
		
		winners := getSeasonWinners(season)
		var winnerLines []string
		
		for _, winner := range winners {
			medal := GetMedalByPosition(winner.Place - 1)
			line := NewMsgCockSeasonWinnerTemplate(
				medal,
				winner.Nickname,
				FormatDickSize(int(winner.TotalSize)),
			)
			winnerLines = append(winnerLines, line)
		}
		
		winnersText := strings.Join(winnerLines, "\n")
		
		var seasonBlock string
		if season.IsActive {
			seasonBlock = NewMsgCockSeasonTemplate(winnersText, startDate, endDate)
		} else {
			seasonBlock = NewMsgCockSeasonWithWinnersTemplate(winnersText, startDate, endDate)
		}
		
		seasonBlocks = append(seasonBlocks, seasonBlock)
	}
	
	allSeasonsText := strings.Join(seasonBlocks, "\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n")
	footer := NewMsgCockSeasonTemplateFooter()
	
	var finalText string
	if totalSeasonsCount > len(seasons) {
		trimInfo := fmt.Sprintf("\n\nüìã _–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ %d –∏–∑ %d —Å–µ–∑–æ–Ω–æ–≤_", len(seasons), totalSeasonsCount)
		finalText = allSeasonsText + "\n\n" + footer + EscapeMarkdownV2(trimInfo)
	} else {
		finalText = allSeasonsText + "\n\n" + footer
	}
	
	return finalText
}
