---
globs: .devcontainer/devcontainer.json
---

# Dev Container Rules

## Основные принципы
- Детерминированность окружения: фиксируйте версии образов, фич и инструментов.
- Безопасность по умолчанию: наименьшие привилегии, отсутствие встроенных секретов.
- Быстрая инициализация: кэширование, предсборки, минимальный набор шагов.
- Переносимость: одинаковая работа локально, в Codespaces и на CI.

## Базовый образ
- Используйте официальный/доверенный базовый образ; закрепляйте по точной версии/дайджесту.
- Предпочитайте тонкие образы и многоэтапную сборку для инструментов.
- Учитывайте архитектуры (amd64/arm64); избегайте плавающего выбора платформы.

## Пользователь и права
- Работайте под непривилегированным пользователем; не используйте root без необходимости.
- Синхронизируйте UID/GID с хостом, чтобы избежать проблем с правами в томах.
- Запрещайте привилегированные флаги и избыточные cap’ы; не монтируйте docker.sock в контейнер разработки.

## Настройки редактора и расширения
- Определяйте минимально необходимый набор расширений VS Code; избегайте перегруза.
- Стабильно фиксируйте версии расширений для воспроизводимости.
- Настройки редактора храните в customizations; не дублируйте их в репозитории без нужды.

## Производительность и кэширование
- Кэшируйте пакетные менеджеры и билд-артефакты в томах; очищайте мусор.
- Минимизируйте количество postCreate/postStart-команд; переносите их в базовый образ при стабилизации.
- Используйте предсборки (prebuilds) для ускорения первого запуска в облаке.

## Скрипты и хуки
- Делайте postCreate/postStart/postAttach идемпотентными и быстрыми.
- Избегайте долгих сетевых операций в хуках; проверяйте кэш и условия выполнения.
- Все скрипты должны завершаться с явным кодом выхода и логировать ключевые шаги.

## Переменные и конфигурация
- Используйте containerEnv для переменных контейнера; не записывайте секреты в репозиторий.
- Для секретов применяйте менеджер секретов платформы или локальные вне-реповые файлы/агенты.
- Храните небезопасные значения только как примеры с заглушками.

## Сервисы и зависимости
- Используйте healthchecks и ожидания готовности сервисов.

## Docker Compose
- Ясно фиксируйте версии компоуза и образов; избегайте latest.
- Не навязывайте хост-тома с приватными путями; делайте настройки кроссплатформенными.

## Плагины, runArgs и безопасность
- Ограничивайте дополнительные runArgs до необходимого минимума.
- Включайте init-процесс внутри контейнера для корректной обработки сигналов.
- Запрещайте привилегированные режимы, доп.права и небезопасные монтирования.

## Кроссплатформенность
- Избегайте жёстких путей и платформоспецифичных утилит; используйте POSIX-совместимые команды.
- Учитывайте особенности файловых систем (регистр, разрешения, перенос строк).

## Антипаттерны
- Плавающие версии образов, фич и расширений.
- Работа под root без причин и широкие привилегии контейнера.
- Длинные и нестабильные postCreate-скрипты с сетевыми скачиваниями.
- Зависимость от хост-специфичных путей и приватных инструментов.
- Монтирование docker.sock и доступ к хостовой сети без строгой необходимости.