---
alwaysApply: true
---

# Dickobrazz - Project Structure üå∂Ô∏è

## Root Structure

### Main Files
- **Entry Point**: [program.go](mdc:program.go) ‚Äì Simple initialization and launch of the application  
- **Configuration**: [go.mod](mdc:go.mod), [go.sum](mdc:go.sum) ‚Äì Go module dependencies  
- **Docker**: [Dockerfile](mdc:Dockerfile), [docker-compose.yaml](mdc:docker-compose.yaml) ‚Äì Containerization and deployment  
- **Documentation**: [README.MD](mdc:README.MD), [README.EN.MD](mdc:README.EN.MD) ‚Äì Project documentation  

### Application Layer (`application/`)

#### Core Application (`application/`)
- **Purpose**: Main application logic and initialization  
- **Key Files**:  
  - [application.go](mdc:application/application.go) ‚Äì Application struct and main lifecycle management  
  - [queries.go](mdc:application/queries.go) ‚Äì Inline query handlers for Telegram bot  
  - [messages.go](mdc:application/messages.go) ‚Äì Message templates and formatting  

#### Database Integration (`application/database/`)
- **Purpose**: MongoDB collections and document structures  
- **Key Files**:  
  - [collections.go](mdc:application/database/collections.go) ‚Äì MongoDB collection accessors  
  - [documents.go](mdc:application/database/documents.go) ‚Äì Document structures and validation  
  - [pipelines.go](mdc:application/database/pipelines.go) ‚Äì MongoDB aggregation pipelines  

#### External Services
- **Purpose**: Integration with external APIs and services  
- **Key Files**:  
  - [telegram.go](mdc:application/telegram.go) ‚Äì Telegram Bot API initialization  
  - [mongo.go](mdc:application/mongo.go) ‚Äì MongoDB connection and data operations  
  - [redis.go](mdc:application/redis.go) ‚Äì Redis connection and caching operations  
  - [random.go](mdc:application/random.go) ‚Äì Random number generation (Random.org + ChaCha8 fallback)  

#### Utilities and Helpers
- **Purpose**: Common utilities and helper functions  
- **Key Files**:  
  - [formatting.go](mdc:application/formatting.go) ‚Äì Text and data formatting utilities  
  - [emoji.go](mdc:application/emoji.go) ‚Äì Seasonal emoji selection logic  

#### Specialized Modules

##### datetime/ (`application/datetime/`)
- **Purpose**: Date and time utilities  
- **Functions**: Timezone handling, date calculations, seasonal logic  

##### geo/ (`application/geo/`)
- **Purpose**: Geographic data and region mapping  
- **Functions**: Russian region mapping for size comparisons  

##### logging/ (`application/logging/`)
- **Purpose**: Structured logging with context  
- **Key Files**:  
  - [logger.go](mdc:application/logging/logger.go) ‚Äì Main logger implementation  
  - [builtins.go](mdc:application/logging/builtins.go) ‚Äì Built-in log fields and constants  

##### timings/ (`application/timings/`)
- **Purpose**: Performance monitoring and tracing  
- **Functions**: Execution time tracking, performance metrics  

## Technology Stack

### Core Technologies
- **Go 1.25** ‚Äì Modern Go with generics and latest features
- **MongoDB 8.2+** ‚Äì Document database with aggregation pipelines
- **Redis 8.2+** ‚Äì Caching layer with TinyLFU algorithm
- **Telegram Bot API** ‚Äì Inline query-based bot interface

### External Dependencies
- **Random.org API** ‚Äì True random number generation
- **ChaCha8 PRNG** ‚Äì Cryptographically secure fallback randomization
- **Docker & Docker Compose** ‚Äì Containerization and orchestration

## Architectural Principles

### Design Patterns
- **Simple Structure**: No dependency injection framework, direct initialization
- **Monolithic Application**: Single binary with clear internal organization  
- **Inline Query Focus**: Designed primarily for Telegram inline interactions
- **Dual Randomization**: External true random + local cryptographic fallback

### Data Flow
1. **User Interaction**: Inline queries through Telegram
2. **Processing**: Query routing and business logic execution
3. **Data Access**: MongoDB for persistence, Redis for caching
4. **Response**: Formatted inline query results with seasonal content

### Key Features Architecture
- **Daily Limits**: One measurement per user per day (Moscow timezone)
- **Seasonal Content**: Dynamic emoji and content based on calendar seasons
- **Leaderboards**: Real-time rankings with MongoDB aggregations
- **Statistics**: Advanced analytics with percentiles and growth tracking
- **Caching Strategy**: Redis with intelligent cache invalidation  