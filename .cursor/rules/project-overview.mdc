---
alwaysApply: true
---

# Dickobrazz - Project Overview üå∂Ô∏è

## Project Information
- **Full Name**: Dickobrazz  
- **Short Name**: dickobot  
- **Description**: A fun Telegram bot that measures your "size" with true randomness. Daily measurements, seasonal competitions, and detailed statistics with regional comparisons.  

## Technical Specifications
- **Go Version**: 1.25+  
- **Main File**: program.go  
- **Architecture**: Simple monolithic Go application with modular structure  

## Technology Stack
- **Language**: Golang  
- **Telegram API**: tgbotapi/v5  
- **Logging**: Custom structured logging  
- **Database**: MongoDB with aggregation pipelines  
- **Cache**: Redis with TinyLFU caching  
- **Randomness**: Random.org API + ChaCha8 fallback  
- **Containerization**: Docker, docker-compose  

## Core Features
- **Daily Size Generation**: Get your size (0-61cm) once per day  
- **Seasonal Emojis**: Different emojis based on current season  
- **Cock Ruler**: Top-13 daily leaderboard  
- **Cock Race**: Seasonal competition with total size accumulation  
- **Statistics**: Personal analytics, growth dynamics, percentile rankings  
- **Regional Integration**: Size comparison with Russian regions  

## Core Modules
- **application**: Main application logic and entry point  
- **database**: MongoDB collections, documents, and aggregation pipelines  
- **datetime**: Date/time utilities for Moscow timezone  
- **geo**: Russian regions mapping and comparisons  
- **logging**: Structured logging with context  
- **timings**: Performance tracing utilities  

## Key Entry Points
- **Main File**: [program.go](mdc:program.go)  
- **Application**: [application/application.go](mdc:application/application.go)  
- **Messages**: [application/messages.go](mdc:application/messages.go)  
- **Telegram Logic**: [application/telegram.go](mdc:application/telegram.go)  
- **Database Queries**: [application/queries.go](mdc:application/queries.go)  

## Data Architecture
- **MongoDB Collections**: Users, measurements, seasons, statistics  
- **Redis Caching**: User data, daily measurements, leaderboards  
- **Aggregation Pipelines**: Complex statistics and rankings  
- **Document Structure**: User profiles, measurement history, seasonal data  

## Randomness System
- **Primary**: Random.org API for true randomness  
- **Fallback**: ChaCha8 cryptographic random generator  
- **Range**: 0-61 centimeters (the 61 is a feature-bug)  
- **Frequency**: Once per day per user (resets at Moscow midnight)  