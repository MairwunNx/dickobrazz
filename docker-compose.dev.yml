---
networks:
  base:
    driver: bridge
services:
  dickobrazz:
    build:
      context: .
      dockerfile: Dockerfile
    cap_add: [ "SYS_PTRACE" ]
    command: ["/usr/local/bin/dickobrazz"]
    container_name: dickobrazz_bot
    depends_on: [ dickobrazz-redis, dickobrazz-mongo ]
    env_file: [ .env.dev ]
    environment:
      TZ: ${TZ}
      REDIS_ADDRESS: ${REDIS_ADDRESS}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MONGODB_URI: ${MONGODB_URI}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      RANDOMORG_TOKEN: ${RANDOMORG_TOKEN}
      DD_DB_HOST: dickobrazz-mongo
    networks: [ base ]
    restart: unless-stopped
    security_opt: [ "seccomp:unconfined" ]
    volumes:
      - .:/workspace:cached
  dickobrazz-mongo:
    container_name: dickobrazz-mongo
    env_file: [ .env.dev ]
    environment:
      TZ: ${TZ}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
    image: mongo:8.2
    networks: [ base ]
    ports: [ "27017:27017" ]
    restart: unless-stopped
    volumes:
      - dickobrazz-mongo-data:/data/db
  dickobrazz-redis:
    environment:
      TZ: ${TZ}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      redis-server --port 6379
      --loglevel warning
      --save 20 1
      --requirepass ${REDIS_PASSWORD}
    container_name: dickobrazz-redis
    env_file: [ .env.dev ]
    image: redis:8.2-alpine
    networks: [ base ]
    ports: [ "6379:6379" ]
    restart: unless-stopped
    volumes:
      - dickobrazz-redis-data:/data
volumes:
  dickobrazz-mongo-data:
    driver: local
  dickobrazz-redis-data:
    driver: local